<?xml version="1.0"?>
<project name="Simple" default="build" basedir=".">

   <target name="-layout">
      <property name="root.path" value="."/>
      <property name="source.path" value="src"/>                
      <property name="main.source.path" value="src/main/java"/>            
      <property name="test.source.path" value="src/test/java"/>
      <property name="javadoc.path" value="doc/javadoc"/>
      <property name="doc.path" value="doc"/>
      <property name="build.path" value="build"/>
      <property name="main.build.path" value="build/main"/>            
      <property name="test.build.path" value="build/test"/>
      <property name="instrumented.build.path" value="build/instrumented"/>
      <property name="jar.path" value="jar"/>
      <property name="lib.path" value="lib"/>
      <property name="package.path" value="package"/>
      <property name="test.path" value="test"/>
      <property name="example.path" value="example"/>
      <property name="skel.path" value="skel"/>
      <property name="report.path" value="report"/>
      <property name="test.report.path" value="report/test"/>
      <property name="cobertura.report.path" value="report/cobertura"/>
      <property name="cobertura.data" value="cobertura.ser"/>
      <property file="build.properties"/>
      <property file="ssh.properties"/>
   </target>

   <target name="-clean" depends="-layout">
      <delete dir="${build.path}"/>
      <delete dir="${jar.path}"/>
   </target>

   <target name="-prepare" depends="-clean">
      <mkdir dir="${build.path}"/>
      <mkdir dir="${main.build.path}"/>
      <mkdir dir="${test.build.path}"/>
      <mkdir dir="${instrumented.build.path}"/>
      <mkdir dir="${report.path}"/>
      <mkdir dir="${test.report.path}"/>
      <mkdir dir="${cobertura.report.path}"/>
      <mkdir dir="${jar.path}"/>
   </target>

   <target name="-setup" depends="-prepare">
      <taskdef resource="tasks.properties">
         <classpath> 
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
      </taskdef>
      <taskdef name="svn" classname="org.tigris.subversion.svnant.SvnTask">
         <classpath> 
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
      </taskdef>       
   </target>

   <target name="-compile" depends="-setup">
      <javac srcdir="${main.source.path}" destdir="${main.build.path}" debug="true" debuglevel="lines,vars,source" source="1.5" encoding="UTF-8">
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
      </javac>
      <copy todir="${build.path}">
         <fileset dir="${main.source.path}">
            <exclude name="**/*.java"/>
         </fileset>
      </copy>
      <javac srcdir="${test.source.path}" destdir="${test.build.path}" debug="true" debuglevel="lines,vars,source" source="1.5" encoding="UTF-8">
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
            <pathelement path="${main.build.path}"/>
         </classpath>
      </javac>
   </target>

   <target name="build" depends="-compile" description="Compile and build project archive">
      <jar jarfile="${jar.path}/simple-xml-${version}.jar" basedir="${main.build.path}"/>
      <delete dir="${build.path}"/>
   </target>

   <target name="-instrument" depends="-compile">
      <cobertura-instrument todir="${instrumented.build.path}" datafile="${build.path}/${cobertura.data}">
         <fileset dir="${main.build.path}">
            <include name="**/*.class"/>
         </fileset>
      </cobertura-instrument>
   </target>

   <target name="-coverage" depends="-instrument">
      <junit printsummary="yes" haltonfailure="yes" fork="yes">
	      <sysproperty key="net.sourceforge.cobertura.datafile"  file="${build.path}/${cobertura.data}" />
         <classpath location="${instrumented.build.path}"/>
         <classpath location="${test.build.path}"/>
         <classpath location="${main.build.path}"/>
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="${test.report.path}">
            <fileset dir="${build.path}/test">
               <include name="**/*Test.class"/>
               <exclude name="**/*TestSuite.class"/>
            </fileset>
         </batchtest>
      </junit>
   </target>

   <target name="report" depends="-coverage" description="Generate a coverage report with project unit tests">
      <mkdir dir="${cobertura.report.path}"/>
      <cobertura-report destdir="${cobertura.report.path}" datafile="${build.path}/${cobertura.data}">
         <fileset dir="${main.source.path}">
            <include name="**/*.java" />
            <exclude name="**/*Test.java" />
            <exclude name="**/*TestSuite.java" />
         </fileset>
      </cobertura-report>
      <delete dir="${build.path}"/>
   </target>

   <target name="test" depends="-compile" description="Compile project and run unit tests">
      <junit showoutput="true" printsummary="yes" haltonfailure="yes">
         <classpath location="${main.build.path}"/>
         <classpath location="${test.build.path}"/>
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="${test.report.path}">
            <fileset dir="${test.build.path}">
               <include name="**/*Test.class"/>
               <exclude name="**/*TestSuite.class"/>
            </fileset>
         </batchtest>
      </junit>
      <delete dir="${build.path}"/>
   </target>

   <target name="test-woodstox" depends="-compile" description="Compile project and run unit tests with woodstox">
      <junit showoutput="true" printsummary="yes" haltonfailure="yes">
	      <sysproperty key="javax.xml.stream.XMLInputFactory"  value="com.ctc.wstx.stax.WstxInputFactory"/>
         <classpath location="${main.build.path}"/>
         <classpath location="${test.build.path}"/>
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>
         <formatter type="plain"/>
         <batchtest fork="yes" todir="${test.report.path}">
            <fileset dir="${test.build.path}">
               <include name="**/*Test.class"/>
               <exclude name="**/*TestSuite.class"/>
            </fileset>
         </batchtest>
      </junit>
      <delete dir="${build.path}"/>
   </target>

   <target name="profile" depends="-compile" description="Target for netbeans profiler">       
      <ant antfile="build.xml" dir="${example.path}" target="profile" inheritall="false"/>
      <delete dir="${build.path}"/>
   </target>

   <target name="package" depends="test" description="Build and test project for a new release">
      <mkdir dir="${package.path}/${build.path}"/>
      <mkdir dir="${package.path}/${build.path}/simple-xml-${version}"/>
      <copy todir="${package.path}/${build.path}/simple-xml-${version}/${source.path}">
         <fileset dir="${main.source.path}"> 
            <exclude name="**/*.class"/>
         </fileset>
      </copy>
      <copy todir="${package.path}/${build.path}/simple-xml-${version}/${doc.path}">
         <fileset file="${doc.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/simple-xml-${version}/${test.path}">
         <fileset dir="${skel.path}/${test.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/simple-xml-${version}/${lib.path}">
         <fileset dir="${skel.path}/${lib.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/simple-xml-${version}/${test.path}/${source.path}">
         <fileset dir="${test.source.path}"/>
      </copy>
      <copy todir="${package.path}/${build.path}/simple-xml-${version}">
         <fileset file="${skel.path}/build.xml"/>
         <filterset>
            <filter token="version" value="${version}"/>
         </filterset>
      </copy>
      <mkdir dir="${package.path}/${version}"/>
      <antcall target="report" inheritall="false"/>
      <ant antfile="build.xml" dir="${package.path}/${build.path}/simple-xml-${version}" target="all" inheritall="false"/>
      <ant antfile="build.xml" dir="${package.path}/${build.path}/simple-xml-${version}/${test.path}" target="test" inheritall="false"/>
      <tar tarfile="${package.path}/${version}/simple-xml-${version}.tar" basedir="${package.path}/${build.path}"/>
      <gzip zipfile="${package.path}/${version}/simple-xml-${version}.tar.gz" src="${package.path}/${version}/simple-xml-${version}.tar"/>
      <tstamp>
         <format property="build.time" pattern="d MMMM yyyy" locale="en"/>
      </tstamp>
      <copy todir="${package.path}/${version}">
         <fileset file="${skel.path}/build.time"/>
         <filterset>
            <filter token="timestamp" value="${build.time}"/>
         </filterset>
      </copy>
      <delete file="${package.path}/${version}/simple-xml-${version}.tar"/>
      <delete dir="${package.path}/${build.path}"/>
      <delete dir="${build.path}"/>
   </target>

   <target name="release" depends="-setup" description="Upload artifacts to sourceforge">
      <antcall target="javadoc"/>
      <tar tarfile="release.tar">
         <tarfileset dir="${root.path}">
            <include name="${javadoc.path}/**/*"/>            
            <include name="${report.path}/**/*"/>    
            <include name="${package.path}/${version}/**/*"/>    
         </tarfileset>
      </tar>       
      <gzip zipfile="release.tar.gz" src="release.tar"/>
      <scp file="release.tar.gz" todir="${login}:${password}@simple.sourceforge.net:${home}" trust="yes"/>
      <sshexec host="simple.sourceforge.net" username="${login}" password="${password}" command="tar -xzvf ${home}/release.tar.gz -C ${home}" trust="yes"/>
      <delete file="release.tar.gz"/>      
      <delete file="release.tar"/>
      <ftp server="upload.sourceforge.net" remotedir="incoming" userid="anonymous" password="niallg@users.sf.net" verbose="yes" depends="yes">
         <fileset file="${package.path}/${version}/simple-xml-${version}.tar.gz"/>
      </ftp>
      <svn javahl="false">
         <commit message="Release ${version}" dir="${root.path}"/>               
      </svn>
   </target>

   <target name="javadoc" depends="-clean" description="Generate source documentation">
      <mkdir dir="${javadoc.path}"/>
      <javadoc sourcepath="${main.source.path}" packagenames="org.simpleframework.*" destdir="${javadoc.path}" private="false">
         <classpath>
            <fileset dir="${lib.path}">
               <include name="**/*.jar"/>
            </fileset>
         </classpath>  
      </javadoc>
      <delete dir="${build.path}"/>
   </target>

</project>
