<p>
This page provides a series of examples illustrating how a class can be annotated. It acts as a quick and dirty overview
of how the framework can be used and also acts as a reference page. All examples can be downloaded for convenience. For further information take
a look at the  <a href="/download/stream/doc/tutorial/tutorial.php">Tutorial</a>.
</p>
<table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Creating nested path elements</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Here an example of how to use the 
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Path.html">Path</a> annotation to
create nested elements and attributes using a single annotated class. Below is an example showing
two elements nested within a XPath expression. 
</p>
<pre class="sh_java">
@Root
public class Example {

   @Path("a/b[1]")
   @Element
   private String x;

   @Path("a/b[2]")
   @Element
   private String y;
}
</pre>
The below snippet shows an example of the resulting XML that can be generated by this class.
<pre class="sh_xml">
&lt;example&gt;
  &lt;a&gt;
    &lt;b&gt;
      &lt;x&gt;foo&lt;/x&gt;
    &lt;/b&gt;
    &lt;b&gt;
      &lt;y&gt;bar&lt;/y&gt;
    &lt;/b&gt;
  &lt;/a&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example1/example1.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Dynamically selecting an element name</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Here an example of how to use the 
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/ElementUnion.html">ElementUnion</a> annotation to
specify a list of options to use for serialization. Here an element name is paired with a type, such that 
when deserializing from XML when a type can be choosen. Also, when serializing the object, if the instance
is of a type listed in the union it is give the associated XML element name.
</p>
<pre class="sh_java">
@Root
public class Example {

   @ElementUnion({
      @Element(name="text", type=String.class),
      @Element(name="int", type=Integer.class),
      @Element(name="double", type=Double.class)
   })
   private Object value;
}
</pre>
The below snippet shows an example of the resulting XML, here because the object value was an integer
the resulting XML element is called int.
<pre class="sh_xml">
&lt;example&gt;
  &lt;int&gt;12&lt;/int&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example2/example2.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Constructor injection</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Constructor injection can be performed with any number of arguments using any of the XML annotations.
In this example the 
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Element.html">Element</a> annotation is
used to identify two values to be injected in to a specific constructor. 
</p>
<pre class="sh_java">
@Root
public class Point {

   @Element
   private final int x;

   @Element
   private final int y;

   public Point(@Element(name="x") int x, @Element(name="y") int y) {
      this.x = x;
      this.y = y;
   }
}
</pre>
The below snippet shows an example of the resulting XML, both the x and y values will be injected
in to the annotated constructor.
<pre class="sh_xml">
&lt;point&gt;
  &lt;x&gt;10&lt;/x&gt;
  &lt;y&gt;4&lt;/y&gt;
&lt;/point&gt;
</pre>
This example can be downloaded from <a href='example3/example3.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Constructor injection with nested path elements</b></td></tr><tr><td><!-- padding --></td><td>
<p>
In this example constructor injection is performed on two elements which also have
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Path.html">Path</a> annotations. As can 
be seen if there is no ambiguity there is no need to specify the path annotations on the constructor. This 
reduces the clutter that can occur with excessive annotations. 
</p>
<pre class="sh_java">
@Root
public class Point {

   @Path("a/b[1]")
   @Element
   private final int x;

   @Path("a/b[1]")
   @Element
   private final int y;

   public Point(@Element(name="x") int x, @Element(name="y") int y) {
      this.x = x;
      this.y = y;
   }
}
</pre>
The below snippet shows an example of the resulting XML, both the x and y values will be injected
in to the annotated constructor.
<pre class="sh_xml">
&lt;point&gt;
  &lt;a&gt;
    &lt;b&gt;
      &lt;x&gt;2&lt;/x&gt;
      &lt;y&gt;7&lt;/y&gt;
    &lt;/b&gt;
  &lt;/a&gt;
&lt;/point&gt;
</pre>
This example can be downloaded from <a href='example4/example4.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Using namespaces</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Below is an example of how to use namespaces with the 
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Namespace.html">Namespace</a> annotation. 
Here two namespaces are declared without a prefix, this means they belong to the default namespace.
</p>
<pre class="sh_java">
@Root
public class Example {

   @Namespace(reference="http://www.blah.com/ns/a")
   @Element
   private String a;

   @Namespace(reference="http://www.blah.com/ns/b")
   @Element
   private String b;
}
</pre>
The below snippet shows an example of the resulting XML, as can be seen the namespaces are
used to qualify the resulting elements.
<pre class="sh_xml">
&lt;example&gt;
  &lt;a xmlns="http://www.blah.com/ns/a"&gt;foo&lt;/a&gt;
  &lt;b xmlns="http://www.blah.com/ns/b"&gt;bar&lt;/b&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example5/example5.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Namespace prefix inheritance</b></td></tr><tr><td><!-- padding --></td><td>
<p>
When using the  
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Namespace.html">Namespace</a> annotation a
prefix can be specified. This prefix is added to the qualified XML elements to ensure they are within 
a specific namespace, rather than the default namespace.
</p>
<pre class="sh_java">
@Root
public class Example {

   @Namespace(prefix="ns1", reference="http://www.blah.com/ns/a")
   @Element
   private String a;

   @Namespace(prefix="ns2", reference="http://www.blah.com/ns/b")
   @Element
   private String b;
}
</pre>
The resulting XML shows that both elements contain the namespace prefix declared in the annotation.
<pre class="sh_xml">
&lt;example&gt;
  &lt;ns1:a xmlns:ns1="http://www.blah.com/ns/a"&gt;foo&lt;/ns1:a&gt;
  &lt;ns2:b xmlns:ns2="http://www.blah.com/ns/b"&gt;bar&lt;/ns2:b&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example6/example6.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Namespace prefix inheritance</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Here a class level namespace is declared using the  
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Namespace.html">Namespace</a> annotation. 
The element declared with the same namespace reference does not need to declare a prefix as it will 
be inherited from the class level annotation.
</p>
<pre class="sh_java">
@Root
@Namespace(prefix="ns1", reference="http://www.blah.com/ns/a")
public class Example {

   @Namespace(reference="http://www.blah.com/ns/a")
   @Path("a/b")
   @Element
   private String x;
}
</pre>
As can be seen in the resulting XML the namespace is declared only once, the child element inherits
the original prefix reducing the verbosity of the XML.
<pre class="sh_xml">
&lt;example xmlns:ns1="http://www.blah.com/ns/a"&gt;
  &lt;a&gt;
    &lt;b&gt;
      &lt;ns1:x&gt;blah&lt;/ns1:x&gt;
    &lt;/b&gt;
  &lt;/a&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example7/example7.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Namespace prefix inheritance</b></td></tr><tr><td><!-- padding --></td><td>
<p>
This example shows how the  
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Default.html">Default</a> annotation
can be used. When this annotation is used fields will be serialized without the need for annotations.
</p>
<pre class="sh_java">
@Default
public class Example {

   private List&lt;Double&gt; a;
   private String b;
   private String c;
   private Date d;

}
</pre>
As can be seen in the resulting XML is generated for all fields within the class.
<pre class="sh_xml">
&lt;example&gt;
  &lt;a&gt;
    &lt;double&gt;1.2&lt;/double&gt;
    &lt;double&gt;31.6&lt;/double&gt;
    &lt;double&gt;52.99&lt;/double&gt;
  &lt;/a&gt;
  &lt;b&gt;foo&lt;/b&gt;
  &lt;c&gt;bar&lt;/c&gt;
  &lt;d&gt;2012-05-22&lt;/d&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example8/example8.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Namespace prefix inheritance</b></td></tr><tr><td><!-- padding --></td><td>
<p>
This example shows how the  
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/Default.html">Default</a> annotation 
can be configured to use bean methods instead of fields for serialization. When used in this
manner all methods that follow the Java Bean naming conventions will be considered for
serialization.
</p>
<pre class="sh_java">
@Default(DefaultType.PROPERTY)
public class Example {

   private String name;

   public String getName() {
      return name;
   }

   public void setName(String name) {
      this.name = name;
   }

}
</pre>
As can be seen in the resulting XML is generated for the Java Bean method.
<pre class="sh_xml">
&lt;example&gt;
  &lt;name&gt;John Doe&lt;/name&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example9/example9.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Dynamically selecting an element name</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Here an example of how to use the 
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/ElementListUnion.html">ElementListUnion</a> 
can be seen. This annotation allows a number of types to be declared to match a single list, all
elements that match the declared names will be gathered in to the list.
</p>
<pre class="sh_java">
@Root
public class Example {

   @ElementListUnion({
      @ElementList(entry="int", type=Integer.class, inline=true),
      @ElementList(entry="date", type=Date.class, inline=true),
      @ElementList(entry="text", type=String.class, inline=true)
   })
   private List&lt;Object&gt; list;
}
</pre>
The below snippet shows an example of the resulting XML, each type is given a name according to its type.
<pre class="sh_xml">
&lt;example&gt;
  &lt;int&gt;12&lt;/int&gt;
  &lt;date&gt;2012-22-05&lt;/date&gt;
  &lt;date&gt;1977-18-11&lt;/date&gt;
  &lt;text&gt;blah&lt;/text&gt;
  &lt;int&gt;1&lt;/int&gt;
  &lt;int&gt;34525&lt;/int&gt;
  &lt;date&gt;2001-01-05&lt;/date&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example10/example10.zip'>here</a>.
</td></tr></table><table border='0'><tr><td><img src='/images/home_bullet.gif' border='0'></td><td><a name='optional'></a><b>Dynamically selecting an element name</b></td></tr><tr><td><!-- padding --></td><td>
<p>
Here an example of how to use the 
<a href="/download/stream/doc/javadoc/org/simpleframework/xml/ElementUnion.html">ElementUnion</a> 
to dynamically select a constructor based on the value deserialized. Constructor matching
will be done by examining the declared name and the instance type.
</p>
<pre class="sh_java">
@Root
public class Example {

   @ElementUnion({
      @Element(name="int", type=Integer.class),
      @Element(name="date", type=Date.class),
      @Element(name="text", type=String.class)
   })
   private Object value;

   public Example(@Element(name="int") int value) {
      this.value = value;
   }

   public Example(@Element(name="int") Date value) {
      this.value = value;
   }

   public Example(@Element(name="int") String value) {
      this.value = value;
   }
}
</pre>
The below snippet shows an example of the resulting XML, here the constructor accepting
a date will be invoked as that is what is deserialized from the file.
<pre class="sh_xml">
&lt;example&gt;
  &lt;date&gt;2001-01-05&lt;/date&gt;
&lt;/example&gt;
</pre>
This example can be downloaded from <a href='example11/example11.zip'>here</a>.
</td></tr></table>

